[{"content":"Welcome back again! This time learned a new tool called Ansible and want to share it with you. Maybe you want to integrate it into your process? Let\u0026rsquo;s dive in!\nIntroduction Learning happens when stuff breaks. That is when you learn the importance of making backups frequently. From recovering and fixing systems, you will get very comfortable using the command line.\nThis eventually will become an obstacle that will cost you. You want to be resilient and quickly get your system \u0026ldquo;back up\u0026rdquo; when it goes down. Maybe you don\u0026rsquo;t have that fresh ISO of fedora that you like. But you have a portable drive with openSUSE on it. Ansible makes this and more very easy to set up and configure.\nAs you develop your skills, the need for automation increases with the complexity. This in turn creates more space to transfer your experience and behavioral skills to a more advanced level.\nWhat I am using right now 1 2 3 4 5 6 7 8  me@home-lab ---------------- OS: Ubuntu 22.04.1 LTS x86_64 Host: 80E5 Lenovo G50-80 Resolution: 1920x1080 CPU: Intel i5-5200U (4) @ 2.700GHz GPU: Intel HD Graphics 5500 Memory: 2748MiB / 3838MiB   Installing the requirements This assumes you have a fresh install, in this case Ubuntu desktop.\n Python3 Pip Ansible  If you already have these installed, skip here\nSteps First install pip using apt:\n1  sudo apt install python3-pip   Next install Ansible using pip\n1  pip3 install ansible   Check if the installation was successful\n1  ansible --version   Now you are ready to go use Ansible and its tools.\n(Re)configuring my main driver. This playbook is executed against a fresh installation of Ubuntu desktop 22. There will be updates following in the future when I set up my server lab environment. From there, I will be testing variations and conditions that will be added to the playbook here.\nLet\u0026rsquo;s take a look at the configure-main.yml file:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  ---- hosts:localhosttasks:- name:Install the packages that you mainly use with the available package managerpackage:name:- keepassxc- vim- remmina- sudo- tmux- nmap- neofetch- imagemagick- docker.io- obs-studio- virt-manager- ansible- python3-pip- flatpak- gitstate:latest- name:Install python-pip packagespip:name:- docker- docker-compose- ansible- name:Add the flathub flatpak repository remote for current userflatpak_remote:name:flathubstate:presentflatpakrepo_url:https://flathub.org/repo/flathub.flatpakrepomethod:user- name:Install the obsidian package from flathub for current userflatpak:name:md.obsidian.Obsidianstate:presentmethod:user  You can describe the state how you want your infrastructure to be in. Because of that, the YAML file is very easy to read for everyone. Even those that are not, or are becoming technical.\nThis is the command to run the playbook:\n1  me@home-lab: ansible-playbook configure-main.yml -b -K   Ansible is agentless. This means that execute a playbook against an array of remote servers without having to install it on those.\nNow I will explain shortly what the flags mean within ansible-playbook command:\n -b run operations as this user you become (default is root) -K ask for privilege escalation password of the user you become  You will be asked to fill in the password -K of become with the -b flag, that is root by default. Then create the state on the machine that you described in your play as \u0026ldquo;localhost\u0026rdquo;.\nClosing thoughts Now you have a playbook that you can get here from the git repo. Edit it how you like it and quickly set up your own setup within a few moments. Learning and using Ansible is a valuable in your Linux DevOps engineering tool and skill set.\n","date":"2022-09-21T16:27:15Z","image":"https://theintegrative.net/p/how-my-main-driver-is-setup-with-ansible/ansible-main-driver-playbook_hu57db689649bd2f065b9314975a8a6f35_1516568_120x120_fill_q75_box_smart1.jpg","permalink":"https://theintegrative.net/p/how-my-main-driver-is-setup-with-ansible/","title":"How my main driver is setup with ansible"},{"content":"Hey, integrative! I am going to breakdown in this post how I setup this self-hosted website. We all have to start somewhere. Happy to take you with me on my public learning journey.\nTL;DR I created a few content management scripts that automate development with hugo and obsidian. It generates the website, makes a backup before it deploys the new website into production by restarting the nginx-certbot container with the new content. You can get code from this repository. Updates will follow.\nForeword For explanatory reasons I\u0026rsquo;ve filtered out irrelevant files and folders so that we can focus on the automation that is important. To see the files that are ignored go here. In this breakdown I will not go into detail about how I configured my nginx-certbot.\nSoftware used in this project  Obsidian - Markdown editor Vim - Text editor Shell Scripting Docker - Containerisation Hugo - Static Website Generator Ubuntu Desktop + Ubuntu Server Nginx - webserver Git - version control Certbot - automates Let\u0026rsquo;s encrypt certificates for security through https  The development environment my machine Let\u0026rsquo;s take a look by listing these scripts in a tree like format:\n1 2 3 4 5 6 7 8  integrative@home:~/website/hugo/doks$ tree . ├── backups │ └── backup.sh ├── development.sh └── production.sh 1 directory, 3 files   We start by developing our website.\nThis is what the script development.sh contains inside:\n1 2 3 4 5 6 7 8 9 10 11 12  #! /bin/bash  # Start your browser brave-browser http://localhost:1313/ # With flatpak start obsidian and open the vault \u0026#34;en\u0026#34;  # that is the content folder through the obsidian URI in the background flatpak run md.obsidian.Obsidian obsidian://open?vault=en \u0026amp; # Starting development server with hugo doks theme for more https://getdoks.org/  # For hugo use: hugo server npm run start   Running development.sh will give me an open browser and markdown editor. From there I can start writing blog posts like this. In a future post I will show you more on workflows, setting up obsidian and more. When done, I simply do Ctrl-C that shuts down the running server. Then commit it to the repository.\nNow, we are going to take a look into the production.sh file:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  #! /bin/bash  # first check for updates npm update # build the website npm run build # make backup of the production site before deployment bash ./backups/backup.sh # update files rsync -ruzv --delete ./public/ theintegrative.net:/home/integrative/public/ # restart docker container with new files ssh theintegrative.net \u0026#34;docker-compose down --remove-orphans \u0026amp;\u0026amp; docker-compose up -d\u0026#34; # start up browser of choice, to see the results brave-browser https://theintegrative.net/   Here there are two things we are going to focus on in order to explain them both.\nWe take backup.sh first:\n1 2 3 4 5 6 7 8 9 10 11 12 13  #! /bin/bash  DATE=`date +%Y-%m-%d_%H` remote=\u0026#39;theintegrative.net:~/public/\u0026#39; destination=\u0026#34;~/website/hugo/doks/backups/backup_${DATE}/\u0026#34; # check if backup folder does not exist, create it and sync files in archive mode  if [[ ! -d ${destination} ]] then echo \u0026#34;Create directory ${destination}\u0026#34; mkdir -p ${destination} fi rsync -rauz --delete ${remote} ${destination} \u0026amp;\u0026amp; echo \u0026#34;Succes!\u0026#34; || echo \u0026#34;Failure\u0026#34;   As you can see here this script checks if the folder for this hour does not exist and if it does updates it. This is a good solution to begin with. But as workloads will increase so will the demand for a more elegant solution. Updates on that solution will apear in this repository.\nNext I will expain shortly what the flags mean within rsync:\n -a archive -z compress file data during the transfer -r recurse into directories -u skip files that are newer on the receiver -v increase verbosity \u0026ndash;delete deletes files from the destination directory that do not exist in the source directoy  After backing up and pushing the new site with rsync, the docker container wil be restarted using docker-compose. In the next part we will go over it quickly before closing this post.\nThe production environment on my server The nice thing about docker files is that\u0026rsquo;s very readable and explains a fair bit by itself. The internal configurations of the nginx-certbot container will not be covered here.\nThis is what the folder looks like on the server:\n1 2  integrative@theintegrative.net:~/$ ls Dockerfile conf.d docker-compose.yaml nginx-certbot.env nginx_secrets public   Dockerfile\n1 2  FROMjonasal/nginx-certbot:latestCOPY conf.d/* /etc/nginx/conf.d/  With the Dockerfile you pull the latest jonasal/nginx-certbot container from the docker.io hub and copy over the nginx configuration files in the correct directory.\nFor that I will manually use this command:\n1  sudo docker build -t jonasal/nginx-certbot:site .   Definitely check for a stable version before using a container like this one. If you are not sure, increment a number after your build tag.\nLike this for instance:\n1  sudo docker build -t jonasal/nginx-certbot:site-0 .   docker-compose.yaml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  version:\u0026#39;3\u0026#39;services:webserver:image:jonasal/nginx-certbot:siterestart:unless-stoppedports:- 80:80- 443:443volumes:- nginx_secrets:/etc/letsencrypt- ./public/:/usr/share/nginx/html:roenvironment:- CERTBOT_EMAIL=example@example.comenv_file:- ./nginx-certbot.envvolumes:nginx_secrets:  Here you see this docker-compose file will use the container that you created and runs the image stored from the local repository. It will restart unless manually stopped. It also binds the volumes to the container from local storage and uses the environment variables given to it.\nClosing thoughs This I my first time writing a technical document like this. So feedback is much appreciated. Stay tuned for more integrated in the future.\n","date":"2022-08-20T16:25:37Z","image":"https://theintegrative.net/p/how-i-setup-this-self-hosted-markdown-website-using-docker-hugo-and-obsidian/picture-this-blog_huf162c2d6316f25287c7db49e982fef49_5779658_120x120_fill_q75_box_smart1.jpg","permalink":"https://theintegrative.net/p/how-i-setup-this-self-hosted-markdown-website-using-docker-hugo-and-obsidian/","title":"How I setup this self-hosted markdown website using docker, hugo and obsidian"},{"content":"\u0026ldquo;The energy I invest over time is the value you can see as a result\u0026rdquo; Because without money, I value skill and energy to create value.\nFeel free to analyze every detail within this post. You can go as far as asking what specific words mean and those within that answer following the questions you ask. Feedback of every type is valuable to me. Go deep without limit.\n(33/33/33) parts: The 3 equally divided parts. Primary needs, Investments and Buffer.\nPrimary needs (100)  Health (Highest priority above everything else)  Quality food, water and supplements, movement   Rent Insurance Travel  Investments (50/50)  Education - The knowledge, skills and experience needed to realize and maintain your goals. Infrastructure - The fundamental structure from which knowledge skills and experience emerge and are created.  Buffer - This is the determining factor based on income (and health) that decides my risk tolerance (100)  Mid-term vision - (5 years)  Priority 1: Primary needs (1 - 2 years)  Saved: 12,000 emergency fund   Priority 2: Maintaining, caching and securing infrastructure  Saved: Double the amount of buying and maintaining infrastructure 3-5 years   Priority 3: Research and development for the long term  50% experimentation  33% to unknown research projects 33% to feed successful projects 33% buffer for either successful or unknown research projects   50% saving for long-term vision - (10 years)     Long-term vision - (10 years)  Creating a regenerative healthy biohacker home and farm environment to live from Be an active contributor and maintainer of trans-humanist, biohacking, technology and spiritual communities Speak almost fluent English Established public speaker and creative called \u0026ldquo;The Integrative\u0026rdquo; Have international friends and contacts that I can trust and create with Optimal health and longevity markers that are maintained and improved A healthy, deep and fulfilling relationship with the one I love    What are the Investments?: My first priority is to invest into what has the most positive impact on the environment that I am working on. The rest you can see as creative input and insight from myself that adds value.\nDepending on the stage of my buffer, the people I work for and with, time and environmental developments, the priority changes of each individual item listed in each category. This means that success is created in a non-linear way.\nEducation  Driver\u0026rsquo;s license IT (Tech)  LPIC 1 + 2 Dev/Ops  Ansible - Terraform Kubernetes Load balancing Something Grafana CI/CD - Jenkins, puppet   Golang Networking Cloud platform specific skills Security   Teaching, leadership and presenting  Creative Inputs Information communication technology:  Reverse engineering Social engineering OS-INT Film/video making  Subjects: Lighting, sound, cuts, type of rolls, storytelling, editing   Audio engineering: creating audio for video, podcast and in spare time music  Marketing:  Creating technical instruction/educational content very quick  Content: video, in person, presentation, on stage, documentation    Extra mentions:  Research skills Writing skills  Infrastructure Basic:  Secure phone + subscription Router + switch + subscription Server lab  Ergonomic workspace:  Base  Laptop Desktop Adjustable desk and chair multiple adjustable monitors Mouse Keyboard Laser b/w printer Computer glasses   Additional  Creative studio setup  XLR microphone Audio Interface Studio monitor Studio headset Microphone arm sound pad mixer Lighting arm Lighting Ring light Video camera\u0026rsquo;s Camera stand Transparent white board *future research      Workout gear:  Resistance bands (3x bar) Calisthenics pull up bar Dumbbell HIIT bike vibrating plate  Biohacking gear:  Home environment  water filtering system wired connections home microbes home automation sauna   Biofeedback devices  Infrared panel Health trackers Continuous Glucose Monitor Heart Rate Variability Trainer Neurofeedback device *future research   Additional  Trans cranial stimulation device    Engineering gear  Soldering set + supplies + workbench Hardware utility set Lock picking set Social engineering and hacking tool set 3d printer  ","date":"2022-07-19T00:56:13Z","image":"https://theintegrative.net/p/plan-for-the-future/plan-future_hu31ae91852291216528bd3ce3d8ef6221_580270_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://theintegrative.net/p/plan-for-the-future/","title":"Plan for the Future"}]